// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/features.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FeatureExtractor_ExtractFeatures_FullMethodName = "/FeatureExtractor/ExtractFeatures"
)

// FeatureExtractorClient is the client API for FeatureExtractor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for feature extraction
type FeatureExtractorClient interface {
	ExtractFeatures(ctx context.Context, in *FeatureRequest, opts ...grpc.CallOption) (*FeatureResponse, error)
}

type featureExtractorClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureExtractorClient(cc grpc.ClientConnInterface) FeatureExtractorClient {
	return &featureExtractorClient{cc}
}

func (c *featureExtractorClient) ExtractFeatures(ctx context.Context, in *FeatureRequest, opts ...grpc.CallOption) (*FeatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FeatureResponse)
	err := c.cc.Invoke(ctx, FeatureExtractor_ExtractFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureExtractorServer is the server API for FeatureExtractor service.
// All implementations must embed UnimplementedFeatureExtractorServer
// for forward compatibility.
//
// Service for feature extraction
type FeatureExtractorServer interface {
	ExtractFeatures(context.Context, *FeatureRequest) (*FeatureResponse, error)
	mustEmbedUnimplementedFeatureExtractorServer()
}

// UnimplementedFeatureExtractorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureExtractorServer struct{}

func (UnimplementedFeatureExtractorServer) ExtractFeatures(context.Context, *FeatureRequest) (*FeatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtractFeatures not implemented")
}
func (UnimplementedFeatureExtractorServer) mustEmbedUnimplementedFeatureExtractorServer() {}
func (UnimplementedFeatureExtractorServer) testEmbeddedByValue()                          {}

// UnsafeFeatureExtractorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureExtractorServer will
// result in compilation errors.
type UnsafeFeatureExtractorServer interface {
	mustEmbedUnimplementedFeatureExtractorServer()
}

func RegisterFeatureExtractorServer(s grpc.ServiceRegistrar, srv FeatureExtractorServer) {
	// If the following call pancis, it indicates UnimplementedFeatureExtractorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureExtractor_ServiceDesc, srv)
}

func _FeatureExtractor_ExtractFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureExtractorServer).ExtractFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureExtractor_ExtractFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureExtractorServer).ExtractFeatures(ctx, req.(*FeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureExtractor_ServiceDesc is the grpc.ServiceDesc for FeatureExtractor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureExtractor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeatureExtractor",
	HandlerType: (*FeatureExtractorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExtractFeatures",
			Handler:    _FeatureExtractor_ExtractFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/features.proto",
}

const (
	FeatureSearcher_SearchImageAcrossVideos_FullMethodName = "/FeatureSearcher/SearchImageAcrossVideos"
)

// FeatureSearcherClient is the client API for FeatureSearcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for searching images across videos
type FeatureSearcherClient interface {
	SearchImageAcrossVideos(ctx context.Context, in *SearchImageRequest, opts ...grpc.CallOption) (*SearchImageResponse, error)
}

type featureSearcherClient struct {
	cc grpc.ClientConnInterface
}

func NewFeatureSearcherClient(cc grpc.ClientConnInterface) FeatureSearcherClient {
	return &featureSearcherClient{cc}
}

func (c *featureSearcherClient) SearchImageAcrossVideos(ctx context.Context, in *SearchImageRequest, opts ...grpc.CallOption) (*SearchImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchImageResponse)
	err := c.cc.Invoke(ctx, FeatureSearcher_SearchImageAcrossVideos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeatureSearcherServer is the server API for FeatureSearcher service.
// All implementations must embed UnimplementedFeatureSearcherServer
// for forward compatibility.
//
// Service for searching images across videos
type FeatureSearcherServer interface {
	SearchImageAcrossVideos(context.Context, *SearchImageRequest) (*SearchImageResponse, error)
	mustEmbedUnimplementedFeatureSearcherServer()
}

// UnimplementedFeatureSearcherServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeatureSearcherServer struct{}

func (UnimplementedFeatureSearcherServer) SearchImageAcrossVideos(context.Context, *SearchImageRequest) (*SearchImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchImageAcrossVideos not implemented")
}
func (UnimplementedFeatureSearcherServer) mustEmbedUnimplementedFeatureSearcherServer() {}
func (UnimplementedFeatureSearcherServer) testEmbeddedByValue()                         {}

// UnsafeFeatureSearcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeatureSearcherServer will
// result in compilation errors.
type UnsafeFeatureSearcherServer interface {
	mustEmbedUnimplementedFeatureSearcherServer()
}

func RegisterFeatureSearcherServer(s grpc.ServiceRegistrar, srv FeatureSearcherServer) {
	// If the following call pancis, it indicates UnimplementedFeatureSearcherServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FeatureSearcher_ServiceDesc, srv)
}

func _FeatureSearcher_SearchImageAcrossVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeatureSearcherServer).SearchImageAcrossVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeatureSearcher_SearchImageAcrossVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeatureSearcherServer).SearchImageAcrossVideos(ctx, req.(*SearchImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeatureSearcher_ServiceDesc is the grpc.ServiceDesc for FeatureSearcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeatureSearcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FeatureSearcher",
	HandlerType: (*FeatureSearcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchImageAcrossVideos",
			Handler:    _FeatureSearcher_SearchImageAcrossVideos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/features.proto",
}
